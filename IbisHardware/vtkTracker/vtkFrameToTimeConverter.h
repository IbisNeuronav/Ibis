/*=========================================================================

  Program:   AtamaiTracking for VTK
  Module:    vtkFrameToTimeConverter.h
  Creator:   David Gobbi <dgobbi@atamai.com>
  Language:  C++

==========================================================================

Copyright (c) 2000-2005 Atamai, Inc.

Use, modification and redistribution of the software, in source or
binary forms, are permitted provided that the following terms and
conditions are met:

1) Redistribution of the source code, in verbatim or modified
   form, must retain the above copyright notice, this license,
   the following disclaimer, and any notices that refer to this
   license and/or the following disclaimer.  

2) Redistribution in binary form must include the above copyright
   notice, a copy of this license and the following disclaimer
   in the documentation or with other materials provided with the
   distribution.

3) The name of the Atamai Inc., nor of its principals or owners,
   past or present, may be used to ensorse or promote products derived
   from this software without specific prior written permission.

THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE SOFTWARE "AS IS"
WITHOUT EXPRESSED OR IMPLIED WARRANTY INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  IN NO EVENT SHALL ANY COPYRIGHT HOLDER OR OTHER PARTY WHO MAY
MODIFY AND/OR REDISTRIBUTE THE SOFTWARE UNDER THE TERMS OF THIS LICENSE
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, LOSS OF DATA OR DATA BECOMING INACCURATE
OR LOSS OF PROFIT OR BUSINESS INTERRUPTION) ARISING IN ANY WAY OUT OF
THE USE OR INABILITY TO USE THE SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

=========================================================================*/
// .NAME vtkFrameToTimeConverter - accurate timing of data frames
// .SECTION Description
// The vtkFrameToTimeConverter is used to generate accurate
// timestamps where the 'data frames' are known to occur at
// a constant frequency, such as video frames generated at 30Hz.
// If timestamps are generated by simply reading the system clock
// when each data record arrives, then errors of +/- 10ms with occur
// because the 'quantum' for process scheduling is usually around 20ms.
// Through the use of this class, the error is reduced to around +/- 2ms.
// <P>This class applies a low-pass filter to the period between data
// events in order to achieve more precise timing.  The theory behind
// its operation is nearly identical to that for a phase-locked loop
// (PLL) circuit.  Also please note that, just like any low-pass filter,
// it requires a bit of time (a few seconds) to stabilize after the
// data readings start.

// .SECTION see also
// vtkPOLARISTracker

#ifndef __vtkFrameToTimeConverter_h
#define __vtkFrameToTimeConverter_h

#include "vtkObject.h"

class VTK_EXPORT vtkFrameToTimeConverter : public vtkObject
{
public:
  static vtkFrameToTimeConverter *New();
  vtkTypeMacro(vtkFrameToTimeConverter,vtkObject);
  void PrintSelf(ostream& os, vtkIndent indent);

  // Description:
  // Set the nominal frequency of the measurement frames.  The default
  // nominal frequency is 100Hz.
  void SetNominalFrequency(double f) { this->NominalFrequency = f; };
  double GetNominalFrequency() { return this->NominalFrequency; };

  // Description:
  // Initialize, this should be done after the nominal frequency is
  // set but before the object is used.
  void Initialize();

  // Description:
  // Give the frame number of the data record that was most recently
  // obtained from the measurement system, i.e. give the frame number
  // that corresponds most closely with 'now'.  The instantanous
  // frequency is estimated within this method, and used to update
  // the virtual clock.  If the given frame is less than or equal
  // to the current LastFrame, it will be quietly ignored.
  // If the measuring device does not provide 'frames' then it
  // is reasonable to use SetLastFrame(GetLastFrame() + 1).
  void SetLastFrame(unsigned long frame);
  unsigned long GetLastFrame() { return this->LastFrameCount; };
  
  // Description:
  // Generate a timestamp for a particular frame.  The frame number 
  // must not be greater than the LastFrame, but neither should it
  // be much less than the LastFrame or else it won't give accurate
  // values. 
  double GetTimeStampForFrame(unsigned long frame);

  // Description:
  // Get the measured frame frequency (which hopefully should not
  // be much different from the nominal frequency).
  double GetInstantaneousFrequency();

protected:
  vtkFrameToTimeConverter();
  ~vtkFrameToTimeConverter();

  double NominalFrequency;
  double LastTimeStamp;
  unsigned long LastFrameCount;
  unsigned long LastLastFrameCount;
  double EstimatedFramePeriod;
  double NextFramePeriod;

private:
  vtkFrameToTimeConverter(const vtkFrameToTimeConverter&);
  void operator=(const vtkFrameToTimeConverter&);  
};

#endif

