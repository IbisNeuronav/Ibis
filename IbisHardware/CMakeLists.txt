# Hardware module is a Qt plugin - this flags is needed to build static plugins properly
add_definitions( -DQT_STATICPLUGIN )

add_subdirectory( vtkTracker )
add_subdirectory( vtkVideo )
add_subdirectory( vtkUltrasound )

#================================
# Includes dir for other Ibis libs
#================================
include_directories( ${IGNS_VTK_QT_INCLUDE_DIR} )
include_directories( ${VTK_TRACKER_INCLUDE_DIR} )
include_directories( ${VTK_EXTENSIONS_INCLUDE_DIR} )
include_directories( ${VTK_VIDEO_INCLUDE_DIR} )
include_directories( ${VTK_ULTRASOUND_INCLUDE_DIR} )
include_directories( ${VTK_MNI_INCLUDE_DIR} )
include_directories( ${VTK_MINC_INCLUDE_DIR} )
include_directories( ${IGNS_VTKIBIS_VOLUME_RENDERING_INCLUDE_DIR} )
include_directories( ${IGNS_VTK_INCLUDE_DIR} )
include_directories( ${IGNS_IBISLIB_INCLUDE_DIR} )
include_directories( ${IGNS_IBISLIB_INCLUDE_DIR}/gui )
include_directories( ${IGNS_IBISLIB_BINARY_DIR} )    # include qt-generated headers


# Define sources
set( IbisHardwareSrc ibishardwaremodule.cpp
                     tracker.cpp trackersettingsdialog.cpp trackedvideosource.cpp
                     videosettingsdialog.cpp videoviewdialog.cpp )
set( IbisHardwareHdr trackerflags.h )
set( IbisHardwareHdrMoc ibishardwaremodule.h tracker.h trackersettingsdialog.h
                        trackedvideosource.h videosettingsdialog.h videoviewdialog.h )
set( IbisHardwareUi trackersettingsdialog.ui videosettingsdialog.ui )

# moc Qt source file without a ui file
qt5_wrap_cpp( IbisHardwareMoc ${IbisHardwareHdrMoc} )

# Generate code for .ui files -> ui_xxx.h
qt5_wrap_ui( IbisHardwareUiHdr ${IbisHardwareUi} )


set( ignsLibsToUse vtkVideo vtkQt vtkTracker vtkUltrasound  )

#================================
# Define output
#================================
include_directories( ${CMAKE_CURRENT_SOURCE_DIR} )           # so that non-generated gui files can include main files
include_directories( ${CMAKE_CURRENT_BINARY_DIR} )           # for files generated by Qt
set( IbisHardwareSrcAll ${IbisHardwareSrc} ${IbisHardwareHdr} ${IbisHardwareHdrMoc} ${IbisHardwareMoc} ${IbisHardwareUiHdr} )
add_library( IbisHardware ${IbisHardwareSrcAll} )

# append necessary libraries to the list for ibis to link
set( HardwareModulesLibs ${HardwareModulesLibs} IbisHardware ${ignsLibsToUse} PARENT_SCOPE )

IF( CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
  SET_TARGET_PROPERTIES( IbisHardware PROPERTIES COMPILE_FLAGS "-fPIC")
ENDIF( CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
